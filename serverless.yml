service: comtac

package:
  individually: true

plugins:
  - serverless-bundle
  - serverless-dynamodb-local
  - serverless-offline
  - serverless-dotenv-plugin

custom:
  stage: ${opt:stage, self:provider.stage}
  profiles:
    dev: dev
    prod: prod
  tableName: ${self:service}-${self:custom.stage}
  dynamodb:
    stages:
      - dev
      - prod
    start:
      port: 8000
      inMemory: true
      migrate: true
      seed: true
    seed:
      comtac:
        sources:
          - table: ${self:service}-${self:provider.stage}
            sources: [./import/evolutionsCL.json, ./import/evolutionsCM.json, ./import/evolutionsIL.json, ./import/evolutionsIM.json, ./import/evolutionsMFL.json, ./import/evolutionsMFM.json, ./import/evolutionsSFL.json, ./import/evolutionsSFM.json]
  serverless-offline:
    port: 3001

provider:
  name: aws
  runtime: nodejs8.10
  stage: prod
  profile: ${self:custom.profiles.${self:custom.stage}}
  region: us-west-2
  environment:
    tableName: ${self:custom.tableName}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - { "Fn::GetAtt": ["ComtacTable", "Arn"] }
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
      Resource:
        - { "Fn::Join": [ "/", [
            { "Fn::GetAtt": ["ComtacTable", "Arn"] }, "index", "gsi_1"
          ]]}
  
functions: 
  evolutionsList:
    handler: evolutions/list.main
    events:
      - http:
          path: evolutions
          method: get
          cors: true
  evolutionsRead:
    handler: evolutions/read.main
    events:
      - http:
          path: evolutions/{id}
          method: get
          cors: true
  alarmsCreate:
    handler: alarms/create.main
    events: 
      - http:
          path: alarms
          method: post
          cors: true
          authorizer: aws_iam
  alarmsRead:
    handler: alarms/read.main
    events:
      - http:
          path: alarms
          method: get
          cors: true
          authorizer: aws_iam
  alarmsUpdate:
    handler: alarms/update.main
    events:
      - http:
          path: alarms
          method: put
          cors: true
          authorizer: aws_iam
  billingProducts:
    handler: billing/products.main
    events:
      - http:
          path: billing/products
          method: get
          cors: true
  billingPlans:
    handler: billing/plans.main
    events:
      - http:
          path: billing/plans
          method: get
          cors: true
  billingCustomers:
    handler: billing/customers.main
    events:
      - http:
          path: billing/customers
          method: post
          cors: true
          authorizer: aws_iam
  billingSubscriptions:
    handler: billing/subscriptions.main
    events:
      - http:
          path: billing/subscriptions
          method: post
          cors: true
          authorizer: aws_iam
  billingSubscription:
    handler: billing/subscription.main
    events:
      - http:
          path: billing/subscription
          method: get
          cors: true
          authorizer: aws_iam
  billingCancel:
    handler: billing/cancel.main
    events:
      - http:
          path: billing/cancel
          method: post
          cors: true
          authorizer: aws_iam

resources:
  # API Gateway Errors
  - ${file(resources/api-gateway-errors.yml)}
  # DynamoDB
  - ${file(resources/dynamodb-table.yml)}
  # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}
